import json, sys, os, logging, traceback
sys.path.append(os.path.join(os.path.dirname(os.path.realpath(__file__)), os.pardir))
import config



class RealInventoryGenerator:

    INVENTORIES_ROOT_FOLDER = config.NETWORK_FOLDER
    INVENTORY_GENENERATOR_RESOURCE_FOLDER = config.ADVISORY_RESOURCES
    PATH_TO_NVD_DUMP = config.nvd_complete_dump

    def load():
        logging.basicConfig(filename='logging/dataset_generator.log', level=logging.DEBUG, 
            format='%(asctime)s - %(levelname)s: %(message)s')
        
        logging.info("[GENERATION] Loading inventory resources...")

        # Load run data
        scanner_to_strategy_to_host_to_step_to_state = dict()
        scanner_to_strategy_to_host_to_step_to_state["merged"] = dict()
        f = open(RealInventoryGenerator.INVENTORY_GENENERATOR_RESOURCE_FOLDER+"/dockerized_environment/merged/moves_status_S101_M1.json",mode="r",encoding="utf-8")
        scanner_to_strategy_to_host_to_step_to_state["merged"]["m1"] = json.loads(f.read())
        f.close()
        f = open(RealInventoryGenerator.INVENTORY_GENENERATOR_RESOURCE_FOLDER+"/dockerized_environment/merged/moves_status_S101_M2.json",mode="r",encoding="utf-8")
        scanner_to_strategy_to_host_to_step_to_state["merged"]["m2"] = json.loads(f.read())
        f.close()
        f = open(RealInventoryGenerator.INVENTORY_GENENERATOR_RESOURCE_FOLDER+"/dockerized_environment/merged/moves_status_S101_M3.json",mode="r",encoding="utf-8")
        scanner_to_strategy_to_host_to_step_to_state["merged"]["m3"] = json.loads(f.read())
        f.close()
        f = open(RealInventoryGenerator.INVENTORY_GENENERATOR_RESOURCE_FOLDER+"/dockerized_environment/merged/moves_status_S101_M4.json",mode="r",encoding="utf-8")
        scanner_to_strategy_to_host_to_step_to_state["merged"]["m4"] = json.loads(f.read())
        f.close()
        f = open(RealInventoryGenerator.INVENTORY_GENENERATOR_RESOURCE_FOLDER+"/dockerized_environment/merged/moves_status_S101_M5.json",mode="r",encoding="utf-8")
        scanner_to_strategy_to_host_to_step_to_state["merged"]["m5"] = json.loads(f.read())
        f.close()

        scanner_to_strategy_to_host_to_step_to_state["nessus"] = dict()
        f = open(RealInventoryGenerator.INVENTORY_GENENERATOR_RESOURCE_FOLDER+"/dockerized_environment/nessus/moves_status_S101_M1.json",mode="r",encoding="utf-8")
        scanner_to_strategy_to_host_to_step_to_state["nessus"]["m1"] = json.loads(f.read())
        f.close()
        f = open(RealInventoryGenerator.INVENTORY_GENENERATOR_RESOURCE_FOLDER+"/dockerized_environment/nessus/moves_status_S101_M2.json",mode="r",encoding="utf-8")
        scanner_to_strategy_to_host_to_step_to_state["nessus"]["m2"] = json.loads(f.read())
        f.close()
        f = open(RealInventoryGenerator.INVENTORY_GENENERATOR_RESOURCE_FOLDER+"/dockerized_environment/nessus/moves_status_S101_M3.json",mode="r",encoding="utf-8")
        scanner_to_strategy_to_host_to_step_to_state["nessus"]["m3"] = json.loads(f.read())
        f.close()
        f = open(RealInventoryGenerator.INVENTORY_GENENERATOR_RESOURCE_FOLDER+"/dockerized_environment/nessus/moves_status_S101_M4.json",mode="r",encoding="utf-8")
        scanner_to_strategy_to_host_to_step_to_state["nessus"]["m4"] = json.loads(f.read())
        f.close()
        f = open(RealInventoryGenerator.INVENTORY_GENENERATOR_RESOURCE_FOLDER+"/dockerized_environment/nessus/moves_status_S101_M5.json",mode="r",encoding="utf-8")
        scanner_to_strategy_to_host_to_step_to_state["nessus"]["m5"] = json.loads(f.read())
        f.close()

        scanner_to_strategy_to_host_to_step_to_state["openvas"] = dict()
        f = open(RealInventoryGenerator.INVENTORY_GENENERATOR_RESOURCE_FOLDER+"/dockerized_environment/openvas/moves_status_S101_M1.json",mode="r",encoding="utf-8")
        scanner_to_strategy_to_host_to_step_to_state["openvas"]["m1"] = json.loads(f.read())
        f.close()
        f = open(RealInventoryGenerator.INVENTORY_GENENERATOR_RESOURCE_FOLDER+"/dockerized_environment/openvas/moves_status_S101_M2.json",mode="r",encoding="utf-8")
        scanner_to_strategy_to_host_to_step_to_state["openvas"]["m2"] = json.loads(f.read())
        f.close()
        f = open(RealInventoryGenerator.INVENTORY_GENENERATOR_RESOURCE_FOLDER+"/dockerized_environment/openvas/moves_status_S101_M3.json",mode="r",encoding="utf-8")
        scanner_to_strategy_to_host_to_step_to_state["openvas"]["m3"] = json.loads(f.read())
        f.close()
        f = open(RealInventoryGenerator.INVENTORY_GENENERATOR_RESOURCE_FOLDER+"/dockerized_environment/openvas/moves_status_S101_M4.json",mode="r",encoding="utf-8")
        scanner_to_strategy_to_host_to_step_to_state["openvas"]["m4"] = json.loads(f.read())
        f.close()
        f = open(RealInventoryGenerator.INVENTORY_GENENERATOR_RESOURCE_FOLDER+"/dockerized_environment/openvas/moves_status_S101_M5.json",mode="r",encoding="utf-8")
        scanner_to_strategy_to_host_to_step_to_state["openvas"]["m5"] = json.loads(f.read())
        f.close()

        # Path is in a file
        f = open(RealInventoryGenerator.PATH_TO_NVD_DUMP,mode="r",encoding="utf-8")
        nvd_dump_path = f.read().strip()
        f.close()

        f = open(nvd_dump_path,mode="r",encoding="utf-8")
        nvd_resource = json.loads(f.read())
        f.close()

        # Compile resources
        host_to_scanner_to_strategy_to_step_to_vulnerabilities = dict()
        for scanner in scanner_to_strategy_to_host_to_step_to_state:
            for strategy in scanner_to_strategy_to_host_to_step_to_state[scanner]:
                for host in scanner_to_strategy_to_host_to_step_to_state[scanner][strategy]:
                    for step in scanner_to_strategy_to_host_to_step_to_state[scanner][strategy][host]:
                        for state in scanner_to_strategy_to_host_to_step_to_state[scanner][strategy][host][step]:

                            if host not in host_to_scanner_to_strategy_to_step_to_vulnerabilities:
                                host_to_scanner_to_strategy_to_step_to_vulnerabilities[host] = dict()
                            if scanner not in host_to_scanner_to_strategy_to_step_to_vulnerabilities[host]:
                                host_to_scanner_to_strategy_to_step_to_vulnerabilities[host][scanner] = dict()
                            if strategy not in host_to_scanner_to_strategy_to_step_to_vulnerabilities[host][scanner]:
                                host_to_scanner_to_strategy_to_step_to_vulnerabilities[host][scanner][strategy] = dict()
                            if step not in host_to_scanner_to_strategy_to_step_to_vulnerabilities[host][scanner][strategy]:
                                host_to_scanner_to_strategy_to_step_to_vulnerabilities[host][scanner][strategy][step] = dict()
                            if state not in host_to_scanner_to_strategy_to_step_to_vulnerabilities[host][scanner][strategy][step]:
                                host_to_scanner_to_strategy_to_step_to_vulnerabilities[host][scanner][strategy][step][state] = scanner_to_strategy_to_host_to_step_to_state[scanner][strategy][host][step][state]

        logging.info("[GENERATION] Inventory resources compiled, initiating generation.")

        return host_to_scanner_to_strategy_to_step_to_vulnerabilities, nvd_resource


    def run(params):
        
        logging.basicConfig(filename='logging/dataset_generator.log', level=logging.DEBUG, 
            format='%(asctime)s - %(levelname)s: %(message)s')
        
        target_scanner,target_strategy,step_modulo,host_to_scanner_to_strategy_to_step_to_vulnerabilities,nvd_resource = params

        # Recreate hosts

        logging.info("[GENERATION] Real scenario, Hosts")
        scanner_to_strategy_to_step_to_host_list = dict()
        scanner_to_strategy_to_step_to_vulnerability_set = dict()

        try:
            for host in host_to_scanner_to_strategy_to_step_to_vulnerabilities:
                for scanner in host_to_scanner_to_strategy_to_step_to_vulnerabilities[host]:
                    if scanner == target_scanner:
                        if scanner not in scanner_to_strategy_to_step_to_host_list:
                            scanner_to_strategy_to_step_to_host_list[scanner] = dict()
                            scanner_to_strategy_to_step_to_vulnerability_set[scanner] = dict()

                        for strategy in host_to_scanner_to_strategy_to_step_to_vulnerabilities[host][scanner]:
                            if strategy == target_strategy:
                                if strategy not in scanner_to_strategy_to_step_to_host_list[scanner]:
                                    scanner_to_strategy_to_step_to_host_list[scanner][strategy] = dict()
                                    scanner_to_strategy_to_step_to_vulnerability_set[scanner][strategy] = dict()
                                    
                                for step in host_to_scanner_to_strategy_to_step_to_vulnerabilities[host][scanner][strategy]:
                                    if int(step) % step_modulo == 0:
                                        if step not in scanner_to_strategy_to_step_to_host_list[scanner][strategy]:
                                            scanner_to_strategy_to_step_to_host_list[scanner][strategy][step] = list()
                                            scanner_to_strategy_to_step_to_vulnerability_set[scanner][strategy][step] = set()

                                        host_struct = dict()
                                        host_struct["id"] = "host-"+str(host)
                                        host_struct["hostname"] = "generated_host"
                                        host_struct["type"] = "synthetic"
                                        host_struct["network_interfaces"] = list()
                                        host_struct["local_applications"] = list()

                                        interface_struct = dict()
                                        interface_struct["ipaddress"] = "192.168.1.1"
                                        interface_struct["macaddress"] = "ff:ff:ff:ff:ff:ff"
                                        interface_struct["ports"] = list()

                                        port_struct = dict()
                                        port_struct["number"] = 101
                                        port_struct["state"] = "open"
                                        port_struct["protocol"] = "TCP"

                                        confirmed_cve = host_to_scanner_to_strategy_to_step_to_vulnerabilities[host][scanner][strategy][step]["confirmed_cve"]
                                        open_cve = host_to_scanner_to_strategy_to_step_to_vulnerabilities[host][scanner][strategy][step]["open_cve"]

                                        port_struct["service"] = {"name":"dummy","cpe_list":list(),"cve_list":list(set(confirmed_cve).union(set(open_cve)))}
                                        # port_struct["cve_list"] = list(set(confirmed_cve).union(set(open_cve)))

                                        scanner_to_strategy_to_step_to_vulnerability_set[scanner][strategy][step] = scanner_to_strategy_to_step_to_vulnerability_set[scanner][strategy][step].union(set(confirmed_cve).union(set(open_cve)))

                                        interface_struct["ports"].append(port_struct)

                                        host_struct["network_interfaces"].append(interface_struct)

                                        local_struct = dict()
                                        local_struct["id"] = 101
                                        local_struct["name"] = "dummy"
                                        local_struct["service"] = list()

                                        service_struct = dict()
                                        service_struct["name"] = "dummy"
                                        service_struct["cpe_list"] = list()
                                        service_struct["cve_list"] = list()

                                        local_struct["service"].append(service_struct)

                                        host_struct["local_applications"].append(local_struct)

                                        scanner_to_strategy_to_step_to_host_list[host][scanner][strategy][step].append(host_struct)


            # Note to future self: from now on, all filters are applied, since scanner_to_strategy_to_step_to_host_list is a new structure


            # Generate edges
            logging.info("[GENERATION] Real scenario, edges")
            scanner_to_strategy_to_step_to_edge_list = list()

            for scanner in scanner_to_strategy_to_step_to_host_list:
                if scanner not in scanner_to_strategy_to_step_to_edge_list:
                    scanner_to_strategy_to_step_to_edge_list[scanner] = dict()

                for strategy in scanner_to_strategy_to_step_to_host_list[scanner]:
                    if strategy not in scanner_to_strategy_to_step_to_edge_list[scanner]:
                        scanner_to_strategy_to_step_to_edge_list[scanner][strategy] = dict()

                    for step in scanner_to_strategy_to_step_to_host_list[scanner][strategy]:
                        if step not in scanner_to_strategy_to_step_to_edge_list[scanner][strategy]:
                            scanner_to_strategy_to_step_to_edge_list[scanner][strategy][step] = list()
                        
                        edge_index_1 = 0
                        for host_struct_1 in scanner_to_strategy_to_step_to_host_list[scanner][strategy][step]:
                            host1_id = host_struct_1["id"]

                            edge_index_2 = 0
                            for host_struct_2 in scanner_to_strategy_to_step_to_host_list[scanner][strategy][step]:
                                host2_id = host_struct_2["id"]

                                scanner_to_strategy_to_step_to_edge_list[scanner][strategy][step].append({
                                    "host_link": [edge_index_1,edge_index_2],
                                    "id_link": [host1_id,host2_id]
                                })

                                edge_index_2 = edge_index_2 + 1
                            edge_index_1 = edge_index_1 + 1



            # Fetch vulnerabilities
            logging.info("[GENERATION] Real Scenario, vulnerabilities")
            scanner_to_strategy_to_step_to_vulnerability_struct_list = dict()

            for scanner in scanner_to_strategy_to_step_to_vulnerability_set:
                if scanner not in scanner_to_strategy_to_step_to_vulnerability_struct_list:
                    scanner_to_strategy_to_step_to_vulnerability_struct_list[scanner] = dict()

                for strategy in scanner_to_strategy_to_step_to_vulnerability_set[scanner]:
                    if strategy not in scanner_to_strategy_to_step_to_vulnerability_struct_list[scanner]:
                        scanner_to_strategy_to_step_to_vulnerability_struct_list[scanner][strategy] = dict()

                    for step in scanner_to_strategy_to_step_to_vulnerability_set[scanner][strategy]:
                        if step not in scanner_to_strategy_to_step_to_vulnerability_struct_list[scanner][strategy]:
                            scanner_to_strategy_to_step_to_vulnerability_struct_list[scanner][strategy][step] = list()

                        for page in nvd_resource:
                            for nvd_cve_struct in page["vulnerabilities"]:
                                if nvd_cve_struct["cve"]["id"] in scanner_to_strategy_to_step_to_vulnerability_set[scanner][strategy][step]:
                                    scanner_to_strategy_to_step_to_vulnerability_struct_list[scanner][strategy][step].append(nvd_cve_struct["cve"])



            # Compile environment
            if not os.path.exists(RealInventoryGenerator.INVENTORIES_ROOT_FOLDER): os.mkdir(RealInventoryGenerator.INVENTORIES_ROOT_FOLDER)

            for scanner in scanner_to_strategy_to_step_to_host_list:
                for strategy in scanner_to_strategy_to_step_to_host_list[scanner]:
                    for step in scanner_to_strategy_to_step_to_host_list[scanner][strategy]:

                        f = open(RealInventoryGenerator.INVENTORIES_ROOT_FOLDER+"real_sc_"+str(scanner)+"_f_"+str(strategy)+"_st_"+str(step)+".json",mode="w",encoding="utf-8")
                        environment_struct = dict()
                        environment_struct["devices"] = scanner_to_strategy_to_step_to_host_list[scanner][strategy][step]
                        environment_struct["vulnerabilities"] = scanner_to_strategy_to_step_to_edge_list[scanner][strategy][step]
                        environment_struct["edges"] = scanner_to_strategy_to_step_to_vulnerability_struct_list[scanner][strategy][step]
                        f.write(json.dumps(environment_struct))
                        f.close()

            logging.info("[GENERATION] END GENERATION of real scenario",)
        
        except Exception as e:
            traceback.print_exc()
            logging.error("%s",e)
