# Import lib
import json
import os, sys

# Import subclasses
from filter import Filter
from aggregator import Aggregator

sys.path.append(os.path.join(os.path.dirname(os.path.realpath(__file__)), os.pardir))

import config



ROOT_FOLDER = ""#"./Implementazione/Attack-Graph-CVE-Aggregation-and-Filtering/"
INVENTORIES_ROOT_FOLDER = ROOT_FOLDER+"dataset/inventories/"
REFERENCE_INVENTORY_NAME = "10_10_random_uniform_1.json"
OUTPUT_FOLDER = INVENTORIES_ROOT_FOLDER+REFERENCE_INVENTORY_NAME.replace(".json","")+"_filter_aggregation/"


# Build output folder
if os.path.exists(OUTPUT_FOLDER):
    for file in os.listdir(OUTPUT_FOLDER):
        os.remove(OUTPUT_FOLDER+file)
    os.rmdir(OUTPUT_FOLDER)
os.mkdir(OUTPUT_FOLDER)


# Load reference inventory
f = open(file=INVENTORIES_ROOT_FOLDER+REFERENCE_INVENTORY_NAME,mode="r",encoding="utf-8")
reference_inventory = json.loads(f.read())
f.close()


# Parse inventory
device_to_platforms = dict()
device_to_interfaces = dict()
#device_to_vulnerabilities = dict()
device_to_interface_to_vulnerabilities = dict()
device_to_local_vulnerabilities = dict()

#device_to_application_to_platforms = dict()
#device_to_application_to_vulnerabilities = dict()

for device_struct in reference_inventory["devices"]:
    device_to_platforms[device_struct["id"]] = set()
    #device_to_vulnerabilities[device_struct["id"]] = set()
    device_to_local_vulnerabilities[device_struct["id"]] = set()

    #device_to_application_to_platforms[device_struct["id"]] = dict()
    #device_to_application_to_vulnerabilities[device_struct["id"]] = dict()

    for application_struct in device_struct["local_applications"]:
        #device_to_application_to_platforms[device_struct["id"]][application_struct["id"]] = set()
        #device_to_application_to_vulnerabilities[device_struct["id"]][application_struct["id"]] = set()

        for service_struct in application_struct["service"]:
            for cve_id in service_struct["cve_list"]:
                #device_to_vulnerabilities[device_struct["id"]].add(cve_id)
                device_to_local_vulnerabilities[device_struct["id"]].add(cve_id)
                #device_to_application_to_vulnerabilities[device_struct["id"]][application_struct["id"]].add(cve_id)
            for cpe in service_struct["cpe_list"]:
                device_to_platforms[device_struct["id"]].add(cpe)
                #device_to_application_to_platforms[device_struct["id"]][application_struct["id"]].add(cpe)


#device_to_network_to_port_to_platforms = dict()
#device_to_network_to_port_to_vulnerabilities = dict()

for device_struct in reference_inventory["devices"]:
    device_to_interfaces[device_struct["id"]] = set()
    device_to_interface_to_vulnerabilities[device_struct["id"]] = dict()
    #device_to_network_to_port_to_platforms[device_struct["id"]] = dict()
    #device_to_network_to_port_to_vulnerabilities[device_struct["id"]] = dict()

    for interface_struct in device_struct["network_interfaces"]:
        device_to_interfaces[device_struct["id"]].add(interface_struct["ipaddress"])
        device_to_interface_to_vulnerabilities[device_struct["id"]][interface_struct["ipaddress"]] = set()
        #device_to_network_to_port_to_platforms[device_struct["id"]][interface_struct["ipaddress"]] = dict()
        #device_to_network_to_port_to_vulnerabilities[device_struct["id"]][interface_struct["ipaddress"]] = dict()

        for port_struct in interface_struct["ports"]:
            #device_to_network_to_port_to_platforms[device_struct["id"]][interface_struct["ipaddress"]][port_struct["number"]] = set()
            #device_to_network_to_port_to_vulnerabilities[device_struct["id"]][interface_struct["ipaddress"]][port_struct["number"]] = set()

            service_struct = port_struct["service"]
            for cve_id in service_struct["cve_list"]:
                #device_to_vulnerabilities[device_struct["id"]].add(cve_id)
                device_to_interface_to_vulnerabilities[device_struct["id"]][interface_struct["ipaddress"]].add(cve_id)
                #device_to_network_to_port_to_vulnerabilities[device_struct["id"]][interface_struct["ipaddress"]][port_struct["number"]].add(cve_id)
            for cpe in service_struct["cpe_list"]:
                device_to_platforms[device_struct["id"]].add(cpe)
                #device_to_network_to_port_to_platforms[device_struct["id"]][interface_struct["ipaddress"]][port_struct["number"]].add(cpe)



# Iterate variables
for filter_mode in range(4):
    for aggregation_mode in range(4):
        print(filter_mode,aggregation_mode)

        # Prepare output
        output_struct = dict()
        output_struct["devices"] = reference_inventory["devices"]
        output_struct["vulnerabilities"] = reference_inventory["vulnerabilities"]
        output_struct["edges"] = reference_inventory["edges"]
        output_struct["meta_devices"] = list()
        output_struct["meta_vulnerabilities"] = list()

        # Iterate devices
        for device_id in device_to_platforms:

            # Prepare payload for aggregator subprocesses
            local_vulnerability_list = list()
            for cve_struct in reference_inventory["vulnerabilities"]:
                if cve_struct["id"] in device_to_local_vulnerabilities[device_id]:
                    local_vulnerability_list.append(cve_struct)

            network_vulnerability_list = list()
            for interface_id in device_to_interfaces[device_id]:
                for cve_struct in reference_inventory["vulnerabilities"]:
                    if cve_struct["id"] in device_to_interface_to_vulnerabilities[device_id][interface_id]:
                        network_vulnerability_list.append(cve_struct)


            # Perform Filter subprocesses
            compatible_local_vulnerability_id_set,incompatible_local_vulnerability_id_set = Filter.perform(filter_mode,local_vulnerability_list,device_to_platforms[device_id])
            compatible_network_vulnerability_id_set,incompatible_network_vulnerability_id_set = Filter.perform(filter_mode,network_vulnerability_list,device_to_platforms[device_id])


            # Prepare payload for aggregator subprocesses
            compatible_local_vulnerability_list = list()
            for cve_struct in reference_inventory["vulnerabilities"]:
                if cve_struct["id"] in compatible_local_vulnerability_id_set:
                    compatible_local_vulnerability_list.append(cve_struct)

            compatible_network_vulnerability_list = list()
            for interface_id in device_to_interfaces[device_id]:
                for cve_struct in reference_inventory["vulnerabilities"]:
                    if cve_struct["id"] in compatible_local_vulnerability_id_set:
                        compatible_network_vulnerability_list.append(cve_struct)

            
            # Perform Aggregator subprocesses
            aggregation_class_to_local_vulnerabilities = Aggregator.perform(aggregation_mode,compatible_local_vulnerability_list)
            aggregation_class_to_network_vulnerabilities = Aggregator.perform(aggregation_mode,compatible_network_vulnerability_list)


            # Get reference structure
            reference_device_structure = dict()
            for device_struct in reference_inventory["devices"]:
                if device_struct["id"] == device_id:
                    reference_device_structure = device_struct
                    break


            # Device output struct
            device_output_struct = dict()
            device_output_struct["id"] = device_id
            device_output_struct["network_meta_cve_list"] = list()
            device_output_struct["local_meta_cve_list"] = list()
            device_output_struct["cpe_list"] = list(device_to_platforms[device_id])

            # Network vulnerabilities
            for aggregation_class_id in aggregation_class_to_network_vulnerabilities:
                device_output_struct["network_meta_cve_list"].append(device_id+"_network_"+aggregation_class_id)

                # Now add the meta vuln to the general file
                output_struct["meta_vulnerabilities"].append({
                    "id": device_id+"_network_"+aggregation_class_id,
                    "device_id": device_id,
                    "cve_list": aggregation_class_to_network_vulnerabilities[aggregation_class_id]["vulnerability_id_list"],
                    "pre_condition": aggregation_class_to_network_vulnerabilities[aggregation_class_id]["pre_condition"],
                    "post_condition": aggregation_class_to_network_vulnerabilities[aggregation_class_id]["post_condition"],
                    "type": "network"
                })

            # Local vulnerabilities
            for aggregation_class_id in aggregation_class_to_local_vulnerabilities:
                device_output_struct["local_meta_cve_list"].append(device_id+"_local_"+aggregation_class_id)

                # Now add the meta vuln to the general file
                output_struct["meta_vulnerabilities"].append({
                    "id": device_id+"_local_"+aggregation_class_id,
                    "device_id": device_id,
                    "cve_list": aggregation_class_to_local_vulnerabilities[aggregation_class_id]["vulnerability_id_list"],
                    "pre_condition": aggregation_class_to_network_vulnerabilities[aggregation_class_id]["pre_condition"],
                    "post_condition": aggregation_class_to_network_vulnerabilities[aggregation_class_id]["post_condition"],
                    "type": "local"
                })

            output_struct["meta_devices"].append(device_output_struct)


        # Dump output
        f = open(file=OUTPUT_FOLDER+"f"+str(filter_mode)+"-a"+str(aggregation_mode)+"-inventory.json",mode="w",encoding="utf-8")
        f.write(json.dumps(output_struct))
        f.close()
