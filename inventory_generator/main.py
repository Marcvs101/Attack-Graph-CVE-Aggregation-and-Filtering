# Import lib
import json
import sys

# Import subclasses
from filter import Filter
from aggregator import Aggregator



ROOT_FOLDER = "./Implementazione/Attack-Graph-CVE-Aggregation-and-Filtering/"
INVENTORIES_ROOT_FOLDER = ROOT_FOLDER+"dataset/inventories/"
REFERENCE_INVENTORY_NAME = "10_10_random_uniform_1.json"



# Load reference inventory
f = open(file=INVENTORIES_ROOT_FOLDER+REFERENCE_INVENTORY_NAME,mode="r",encoding="utf-8")
reference_inventory = json.loads(f.read())
f.close()


# Parse inventory
device_to_platforms = dict()
device_to_vulnerabilities = dict()

device_to_application_to_platforms = dict()
device_to_application_to_vulnerabilities = dict()

for device_struct in reference_inventory["devices"]:
    device_to_platforms[device_struct["id"]] = set()
    device_to_vulnerabilities[device_struct["id"]] = set()

    device_to_application_to_platforms[device_struct["id"]] = dict()
    device_to_application_to_vulnerabilities[device_struct["id"]] = dict()

    for application_struct in device_struct["local_applications"]:
        device_to_application_to_platforms[device_struct["id"]][application_struct["id"]] = set()
        device_to_application_to_vulnerabilities[device_struct["id"]][application_struct["id"]] = set()

        for service_struct in application_struct["services"]:
            for cve_id in service_struct["cve_list"]:
                device_to_vulnerabilities[device_struct["id"]].add(cve_id)
                device_to_application_to_vulnerabilities[device_struct["id"]][application_struct["id"]].add(cve_id)
            for cpe in service_struct["cpe_list"]:
                device_to_platforms[device_struct["id"]].add(cpe)
                device_to_application_to_platforms[device_struct["id"]][application_struct["id"]].add(cpe)


device_to_network_to_port_to_platforms = dict()
device_to_network_to_port_to_vulnerabilities = dict()

for device_struct in reference_inventory["devices"]:
    device_to_network_to_port_to_platforms[device_struct["id"]] = dict()
    device_to_network_to_port_to_vulnerabilities[device_struct["id"]] = dict()

    for interface_struct in device_struct["network_interfaces"]:
        device_to_network_to_port_to_platforms[device_struct["id"]][interface_struct["ipaddress"]] = dict()
        device_to_network_to_port_to_vulnerabilities[device_struct["id"]][interface_struct["ipaddress"]] = dict()

        for port_struct in interface_struct["ports"]:
            device_to_network_to_port_to_platforms[device_struct["id"]][interface_struct["ipaddress"]][port_struct["number"]] = set()
            device_to_network_to_port_to_vulnerabilities[device_struct["id"]][interface_struct["ipaddress"]][port_struct["number"]] = set()

            for service_struct in port_struct["services"]:
                for cve_id in service_struct["cve_list"]:
                    device_to_vulnerabilities[device_struct["id"]].add(cve_id)
                    device_to_network_to_port_to_vulnerabilities[device_struct["id"]][interface_struct["ipaddress"]][port_struct["number"]].add(cve_id)
                for cpe in service_struct["cpe_list"]:
                    device_to_platforms[device_struct["id"]].add(cpe)
                    device_to_network_to_port_to_platforms[device_struct["id"]][interface_struct["ipaddress"]][port_struct["number"]].add(cpe)



# Iterate variables
for filter_mode in range(4):
    for aggregation_mode in range(4):
        print(filter_mode,aggregation_mode)

        # Prepare output
        output_struct = dict()
        output_struct["devices"] = dict()
        output_struct["vulnerabilities"] = reference_inventory["vulnerabilities"]
        output_struct["edges"] = reference_inventory["edges"]

        # Iterate devices
        for device_id in device_to_vulnerabilities:
            vulnerability_list = device_to_vulnerabilities[device_id]
            cpe_list = device_to_platforms[device_id]

            # Perform Filter subprocess
            compatible_vulnerability_id_set,incompatible_vulnerability_id_set = Filter.perform(filter_mode,vulnerability_list,cpe_list)

            # Prepare payload for aggregator subprocess
            compatible_vulnerability_list = list()
            for cve_struct in vulnerability_list:
                if cve_struct["cve"]["id"] in compatible_vulnerability_id_set:
                    compatible_vulnerability_list.append(cve_struct)

            # Get reference structure
            reference_device_structure = dict()
            for device_struct in reference_inventory["devices"]:
                if device_struct["id"] == device_id:
                    reference_device_structure = device_struct
                    break
            
            # Device output struct
            device_output_struct = dict()
            device_output_struct["id"] = device_id
            device_output_struct["hostname"] = reference_device_structure["hostname"]
            device_output_struct["type"] = reference_device_structure["type"]
            device_output_struct["network_interfaces"] = list()
            device_output_struct["local_applications"] = list()

            for reference_interface_struct in reference_device_structure["network_interfaces"]:
                interface_struct = dict()
                interface_struct["ipaddress"] = reference_interface_struct["ipaddress"]
                interface_struct["macaddress"] = reference_interface_struct["macaddress"]
                interface_struct["ports"] = list()

                for reference_port_struct in reference_interface_struct["ports"]:
                    port_struct = dict()
                    port_struct["number"] = reference_port_struct["number"]
                    port_struct["state"] = reference_port_struct["state"]
                    port_struct["protocol"] = reference_port_struct["protocol"]
                    port_struct["services"] = list()

                    for reference_service_struct in reference_port_struct["services"]:
                        service_struct = dict()
                        service_struct["name"] = reference_service_struct["name"]
                        service_struct["cpe_list"] = reference_service_struct["cpe_list"]
                        service_struct["cve_list"] = list()

                        for cve_id in reference_service_struct["cve_list"]:
                            if cve_id in compatible_vulnerability_id_set:
                                service_struct["cve_list"].append(cve_id)
                        
                        port_struct["services"].append(service_struct)

                    interface_struct["ports"].append(port_struct)

                device_output_struct["network_interfaces"].append(interface_struct)
            

            for reference_local_struct in reference_device_structure["local_applications"]:
                local_struct = dict()
                local_struct["id"] = reference_local_struct["id"]
                local_struct["name"] = reference_local_struct["name"]
                local_struct["services"] = list()

                for reference_service_struct in reference_port_struct["services"]:
                    service_struct = dict()
                    service_struct["name"] = reference_service_struct["name"]
                    service_struct["cpe_list"] = reference_service_struct["cpe_list"]
                    service_struct["cve_list"] = list()

                    for cve_id in reference_service_struct["cve_list"]:
                        if cve_id in compatible_vulnerability_id_set:
                            service_struct["cve_list"].append(cve_id)
                    
                    local_struct["services"].append(service_struct)

                device_output_struct["local_applications"].append(local_struct)


            output_struct["devices"].append(device_output_struct)


        # Dump output
        f = open(file=INVENTORIES_ROOT_FOLDER+"f"+str(filter_mode)+"-a"+str(aggregation_mode)+"-inventory.json",mode="w",encoding="utf-8")
        f.write(json.dumps(output_struct))
        f.close()


# Perform Aggregator subprocess
aggregation_class_to_vulnerabilities = Aggregator.perform(aggregation_mode,compatible_vulnerability_list)
