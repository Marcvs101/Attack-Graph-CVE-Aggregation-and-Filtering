import os, time, csv
import os.path, sys
sys.path.append(os.path.join(os.path.dirname(os.path.realpath(__file__)), os.pardir))

import netspa, tva, multig
import config

if __name__ == "__main__":
    
    reset_time=True
    if not os.path.exists(config.ANALYSIS_TIME_FILE) or reset_time:
        with open(config.ANALYSIS_TIME_FILE, 'w', newline='') as f:
            writer = csv.writer(f)
            writer.writerow(['network','model','filter','aggregation','generation_time'])

    for fdir in os.listdir(config.NETWORK_FOLDER):
        if os.path.isdir(config.NETWORK_FOLDER+fdir):
            base_folder = config.NETWORK_FOLDER+fdir+"/"
            graph_folder = config.GRAPH_FOLDER+fdir+"/"
            
            for net_file in os.listdir(base_folder):
                if not os.path.exists(graph_folder): os.mkdir(graph_folder)
                
                start_netspa=time.perf_counter()
                netspa.generate_netspa_model(base_folder+net_file,graph_folder)
                end_netspa=time.perf_counter()

                start_tva=time.perf_counter()
                tva.generate_tva_model(base_folder+net_file,graph_folder)
                end_tva=time.perf_counter()

                start_multi=time.perf_counter()
                multig.generate_multig_model(base_folder+net_file,graph_folder)
                end_multi=time.perf_counter()


                network_type = base_folder.split("/")[2]
                info_file = net_file.split("-")
                filter_level = int(info_file[0].replace("f",""))
                aggregation_level = int(info_file[1].replace("a",""))
                with open(config.ANALYSIS_TIME_FILE, 'a', newline='') as fd:
                    writer = csv.writer(fd)
                    writer.writerow([
                        network_type,"NETSPA",filter_level,aggregation_level,
                        end_netspa-start_netspa]
                    )
                    writer.writerow([
                        network_type,"TVA",filter_level,aggregation_level,
                        end_tva-start_tva]
                    )
                    writer.writerow([
                        network_type,"MULTI",filter_level,aggregation_level,
                        end_multi-start_multi]
                    )