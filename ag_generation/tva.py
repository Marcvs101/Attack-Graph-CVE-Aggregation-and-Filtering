import json
import networkx as nx
import os.path, sys
sys.path.append(os.path.join(os.path.dirname(os.path.realpath(__file__)), os.pardir))

import config
def generate_tva_model(network_file):
    with open(config.NETWORK_FOLDER+network_file) as nf:
        content_network = json.load(nf)
    reachability_edges = content_network["edges"]
    vulnerabilities = content_network["meta_vulnerabilities"]

    G = nx.DiGraph()
    for r_edge in reachability_edges:
        src_id = r_edge["host_link"][0]
        dst_id = r_edge["host_link"][1]
        for meta_vuln in vulnerabilities:
            if dst_id == vulnerabilities["device_id"]:
                precondition = meta_vuln["pre_condition"]
                postcondition = meta_vuln["post_condition"]
                vuln_id = meta_vuln["id"]

                req_node = precondition+"@"+str(src_id)
                gain_node = postcondition+"@"+str(dst_id)

                if req_node not in G.nodes(): G.add_node(req_node, type="privilege", color="green")
                if gain_node not in G.nodes(): G.add_node(gain_node, type="privilege", color="green")
                if vuln_id not in G.nodes(): G.add_node(vuln_id, type="vulnerability", color="blue")
                if (req_node, vuln_id) not in G.edges(): G.add_edge(req_node, vuln_id)
                if (vuln_id, gain_node) not in G.edges(): G.add_edge(vuln_id, gain_node)
    nx.write_graphml_lxml(G, "dataset/graphs/TVA_"+network_file.split(".json")[0]+".graphml")
