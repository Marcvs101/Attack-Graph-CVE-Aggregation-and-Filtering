import json
import networkx as nx
# import os.path, sys
# sys.path.append(os.path.join(os.path.dirname(os.path.realpath(__file__)), os.pardir))

def generate_multig_model(network_file):
    with open(network_file) as nf:
        content_network = json.load(nf)
    reachability_edges = content_network["edges"]
    vulnerabilities = content_network["meta_vulnerabilities"]

    G = nx.MultiDiGraph()
    count=0
    for r_edge in reachability_edges:
        src_id = r_edge["id_link"][0]
        dst_id = r_edge["id_link"][1]
        for meta_vuln in vulnerabilities:
            if dst_id == meta_vuln["device_id"]:
                precondition = meta_vuln["pre_condition"]
                postcondition = meta_vuln["post_condition"]
                vuln_id = meta_vuln["id"]

                req_node = precondition+"@"+str(src_id)
                gain_node = postcondition+"@"+str(dst_id)

                if req_node not in G.nodes(): G.add_node(req_node, type="privilege", color="green")
                if gain_node not in G.nodes(): G.add_node(gain_node, type="privilege", color="green")
                if (vuln_id, gain_node) not in G.edges(): 
                    G.add_edge(vuln_id, gain_node, key=count)
                    count+=1

    subfolder = network_file.split("/")
    graph_filename = subfolder[len(subfolder)-1].split(".json")[0]
    nx.write_graphml_lxml(G, "dataset/graphs/MULTI_"+graph_filename+".graphml")