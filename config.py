import json

### Running System parameters
num_cores=1

### Reachability and Vulnerability configurations
nhosts = [10] #[5,10,25,50,75,100,200,300,500]
nvulns = [10] #[5,10,25,50,75,100,200,300,500]
topologies = ['random'] #['mesh','random','star','ring','tree','powerlaw','lan0','lan25','lan50']
distro = ['uniform'] #['bernoulli','binomial','poisson','uniform']
diversity = [1] #[0,0.25,0.5,0.75,1] #from all equal (0) to all different (1)

### Inventories
NETWORK_FOLDER = "dataset/inventories/"

real_inventory=NETWORK_FOLDER+"real_inventory.json"
panacea_device="dataset/real/deviceInventory.json"
panacea_vulnerabilities="dataset/real/vulnerabilityCatalog.json"
panacea_reachability="dataset/real/reachabilityInventory.json"

### NIST backup
cpe_file = "dataset/NIST/services.json"
cve_file1 = "dataset/NIST/vulnerabilities1.json"
cve_file2 = "dataset/NIST/vulnerabilities2.json"
cve_file3 = "dataset/NIST/vulnerabilities3.json"

def get_pool_vulnerabilities(tot_vuln):
    if tot_vuln <= 14500:
        with open(cve_file1) as f1:
            return json.load(f1)["vulnerabilities"]
    elif 14500 < tot_vuln <= 29000:
        with open(cve_file1) as f1, open(cve_file2) as f2:
            vulns1 = json.load(f1)["vulnerabilities"]
            vulns2 = json.load(f2)["vulnerabilities"]
            return vulns1+vulns2
    else:
        with open(cve_file1) as f1, open(cve_file2) as f2, open(cve_file3) as f3:
            vulns1 = json.load(f1)["vulnerabilities"]
            vulns2 = json.load(f2)["vulnerabilities"]
            vulns3 = json.load(f3)["vulnerabilities"]
            return vulns1+vulns2+vulns3